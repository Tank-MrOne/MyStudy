// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `@grid-columns`.

.make-grid-columns() {
  // Common styles for all sizes of grid columns, widths 1-12
  .col(@index) { // 
    //@item:".col-xs-1,.col-sm-1,.col-md-1,.col-lg-1";
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), @item);
    //.col(2,".col-xs-1,.col-sm-1,.col-md-1,.col-lg-1");
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
    //@item:".col-xs-2,.col-sm-2,.col-md-2,.col-lg-2"
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    //.col(3,".col-xs-1,.col-sm-1,.col-md-1,.col-lg-1,.col-xs-2,.col-sm-2,.col-md-2,.col-lg-2)
    //.col(13,".col-xs-1,.col-sm-1,.col-md-1,.col-lg-1,.col-xs-2,.col-sm-2,.col-md-2,.col-lg-2,3333,4444,5555,6666,7777,8888........)
    .col((@index + 1), ~"@{list}, @{item}");
  }

  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      position: relative;
      // Prevent columns from collapsing when empty
      min-height: 1px;
      // Inner gutter via padding
      padding-left:  ceil((@grid-gutter-width / 2));
      padding-right: floor((@grid-gutter-width / 2));
    }
  }
  .col(1); // kickstart it
}

.float-grid-columns(@class) {
  .col(@index) { // initial
    //@item:".col-xs-1";
    @item: ~".col-@{class}-@{index}";
    // .col(2,".col-xs-1")
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general
    //@item:".col-xs-2"
    @item: ~".col-@{class}-@{index}";
    // .col(3,".col-xs-1,.col-xs-2")
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      float: left;
    }
  }
  .col(1); // kickstart it
}

.calc-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
  /* .col-xs-12{
    width:12 / 12 * 100%
  } */
  /* .col-xs-11{
    width:11 / 12 * 100%
  } */
  /* .col-xs-10{
    width:10 / 12 * 100%
  } */
  //....
  /* .col-xs-1{
    width:1 / 12 * 100%
  } */
  .col-@{class}-@{index} {
    width: percentage((@index / @grid-columns));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = push) and (@index > 0) {
  .col-@{class}-push-@{index} {
    left: percentage((@index / @grid-columns));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = push) and (@index = 0) {
  .col-@{class}-push-0 {
    left: auto;
  }
}
.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index > 0) {
  /* .col-xs-pull-12{
    right: 12 / 12 * 100%;
  } */
  /* .col-xs-pull-11{
    right: 11 / 12 * 100%;
  } */
  //....
  /* .col-xs-pull-1{
    right: 1 / 12 * 100%;
  } */
  .col-@{class}-pull-@{index} {
    right: percentage((@index / @grid-columns));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index = 0) {
  .col-@{class}-pull-0 {
    right: auto;
  }
}
.calc-grid-column(@index, @class, @type) when (@type = offset) {
  .col-@{class}-offset-@{index} {
    margin-left: percentage((@index / @grid-columns));
  }
}

// Basic looping in LESS
.loop-grid-columns(@index, @class, @type) when (@index >= 0) {
  .calc-grid-column(@index, @class, @type);
  // next iteration
  .loop-grid-columns((@index - 1), @class, @type);
}

// Create grid for specific class
.make-grid(@class) {
  .float-grid-columns(@class);//对每次传入的值构成的12个类型  绑定浮动属性
  .loop-grid-columns(@grid-columns, @class, width);//对每次传入的值构成12个类型  绑定宽度
  .loop-grid-columns(@grid-columns, @class, pull);
  .loop-grid-columns(@grid-columns, @class, push);
  .loop-grid-columns(@grid-columns, @class, offset);
}
