
day09

4个案例：comments  todos  searchUsers(vuex)  vue-router

40、脚手架
	之前自己去搭建环境 配置webpack 只是一些基本的功能
	4/3
	2
        区别

	1)	创建脚手架4/3的vue项目, 并运行
		npm install -g @vue/cli
		vue create vue-demo
		npm run serve

	2)	创建脚手架2的vue项目
		npm install -g @vue/cli-init
		vue init webpack vue-demo
    		npm run dev


41    eslint的配置的错误级别
	1、
	/* eslint-disable no-unused-vars */
	// 局部禁用某个错误提示

	2、
	//package.json当中找到eslintConfig项，全局配置禁用某些错误提示
	"rules": {
		"no-unused-vars":"off"
    	}
	
	3、
	//开发阶段直接关闭eslint的提示功能

	手动创建vue.config.js
	module.exports = {
		//  写自己想要配置的东西去覆盖系统自带的
		// 关闭ESLint的规则
 		lintOnSave: false
	}


42、自定义全局事件总线
				

43、vue源码分析

	准备知识点  

		1)	[].slice.call(lis): 将伪数组转换为真数组
		2)	node.nodeType: 得到节点类型
		3)	Object.defineProperty(obj, propName, {}): 给对象添加/修改属性(指定描述符)
				configurable: true/false  是否可以重新define
				enumerable: true/false 是否可以枚举(for..in / keys())
				value: 指定初始值
				writable: true/false value是否可以修改
				get: 回调函数, 用来得到当前属性值
				set: 回调函数, 用来监视当前属性值的变化
		4)	Object.keys(obj): 得到对象自身可枚举的属性名的数组
		5)	documentfragment 
			是一个容器，这个容器本身进入不了页面，它内部的所有东西会进去页面，在内存中干活，批量更新
			1、可以把原来的元素的子节点，转移到documentfragment 节点当中，原来的里面就没有了
			2、去处理documentfragment 中的子元素节点数据
			3、最后把documentfragment 节点 追加到原来的元素当中
		6)	obj.hasOwnProperty(prop): 判断prop是否是obj自身的属性



			
		
	四个文件全部引入
	第一大步:数据代理(MVVM文件)

		MVVM当中的代码
		
		从MVVM构造函数一行一行往下看


		核心使用的是Object.defineProperty  

		本质是在vm对象身上添加和data内部属性相同的属性，并且把vm的这些属性都添加get和set
		
		读取vm身上的属性相当于在读取data内部的属性
		
		vm身上的这些属性值发生改变会改变data内部对应的属性的值



		被代理对象：data
		代理对象：vm
		

		
		
		MVVM(options)
		

		data:{
                	msg:'zhaoliying',                          
                	obj:{
                    		msg:'yangmi',
                    		heihei:'哈哈'
               		}
            	}


	第二大步：数据监视/数据劫持

		observe(data, this); ====》 new Observer(value);
		
		做了两件事：

		1、根据data中的属性，对应都创建一个dep对象

		假设数据是
		data:{
                	msg:'zhaoliying',                          =====>  dep0{  id: 0  subs:[watcher]}    (msg)
                	obj:{					   =====>  dep1{  id: 1  subs:[]}    (obj)
                    		msg:'yangmi',			   =====>  dep2{  id: 2  subs:[]}    (obj.msg)
                    		heihei:'哈哈'			   =====>  dep3{  id: 3  subs:[]}    (obj.heihei)
               		}
            	}


		2、会把data当中的数据变为响应式数据，原理还是添加getter和setter

		每个data数据对象的属性都会被添加上get和set
		每个属性都会有一个相应的dep对象,递归添加


			

		
	第三大步：模板解析和数据绑定 
		（初始化显示，初始化显示的过程中就把模板当中的表达式和对应data的属性，通过watcher和dep联系起来）
		
		单独看插值

			把root当中的所有子节点 放到fragment当中
			在内存当中对fragment的子节点全部递归解析

			最后获取到元素节点当中的文本子节点，然后获取到值给文本子节点初始化赋值
		
			赋值完成后会给页面上的每个表达式创建一个watcher对象，创建watcher的时候顺变和对应的属性dep绑定
		
			最后把fragment内部的东西还回到页面  就看到数据了
		
		
			msg  模板当中的表达式                watcher:{
								cb: function(){}
								vm:vm
								exp:'msg'
								depIds:{0:dep0}
								value:'zhaoliying'  //'yangmi'
				     	     		    }	


		单独看一般指令： 一般指令v-text  v-html v-class
		单独看事件指令：  
		数据双向绑定：

	最后原理图：
		

